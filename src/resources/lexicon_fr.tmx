<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE tmx PUBLIC "-//LISA OSCAR:1998//DTD for Translation Memory eXchange//EN" "http://www.lisa.org/tmx/tmx14.dtd">
<tmx version="1.4">
    <header creationtool="domderrien.i18n" creationtoolversion="1.0"
        datatype="PlainText" segtype="paragraph" adminlang="en" srclang="English"
        o-tmf="domderrien"
    ></header>
    <body>
        <tu tuid="bundle_language" dataType="text">
            <prop type="x-tier">dojotk</prop>
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Fran√ßais</seg>
            </tuv>
        </tu>
        <tu tuid="_introduction_" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Twetailer (glossary): brokers Consumer Demand with local Retailers' available Supply - via tweets, for f(r)ee. For help using my Help system, Send "?help". Afterwards, if you're a Consumer, SEND "?consumer". Retailers can SEND "?retailer". |
                Twetailer (see also): 140, www, free, fee, twitter, im |
                Twetailer (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="#Demo" dataType="text">
            <prop type="x-for-review">Dom</prop>
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>#Demo (story): As Twetailer, I want to provide both Consumers and Retailers an end-to-end Demand demo, so they can better experience Twetailer. |
                #Demo (usage): Include #demo in your Demand Tags and Twetailer will automatically Propose and eventually Close the Demand. |
                #Demo (rules): Reserved keyword |
                #Demo (see also): hash |
                #Demo (AKA): hashtag, # |
                #Demo (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="140" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>140 (glossary): Retailers supply goods/services via tags. Consumers demand tags within their locale. Twetailer matches demand &amp; supply for free/fee |
                140 (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="24906" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>24906 (glossary): My search - for now, is limited to 24906 miles, or, 40075 kilometers - which is the distance around the world |
                    24906 (see also): range, locale, consumer-tags, tags, demand, consumer |
                    24906 (AKA): 40075 |
                    24906 (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Action" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">2</prop>
            <tuv xml:lang="fr">
                <seg>Action (story): As a user of Twetailer, I want to be able to interact with the system via brief Command-line actions, so I can create, read, update, delete (CRUD) and process transactions |
                Action (usage): Send "![action]". Example: Send "!list" |
                Action (see also): cancel, close, confirm, decline, demand, flag, help, list, propose, rate, register, reserve, settle, supply, wish, www |
                Action (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Address" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Address (story): As a Sales Associate, I want to provide my Store's address so Consumers can pick-up their goods. |
                Address (usage): Street number, name and possibly store number.  |
                Address (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="AKA" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>AKA (glossary): acronym for "also known as" |
                    AKA (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Amazon" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Amazon (glossary): Twetailer implements the </seg>
            </tuv>
        </tu>
        <tu tuid="Attribute" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Attribute (glossary): Search criteria |
                    Attribute (see also): demand |
                    Attribute (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Backup" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Backup (story): As a Sales Associate, I want Register a Sales Associate colleague of mine as my backup, so they can be notified when I don't Propose, or, Decline a Demand within the Delay I set - like 24 hours |
                Backup (usage): backup:[Sales-Associate-ID] |
                Backup (example): backup:12345 |
                Backup (rules): The backup Sales Associate ID must already exist|
                Cancel (see also): register-salesassociate, salesassociate, |
                Cancel (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Cancel" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Cancel (story): As a Consumer, or, Retailer, I want to Cancel a respective Demand, or, Proposal, so I can cease further transaction processing on it |
                Cancel (usage - Consumers): Send "!cancel ref:[my-Demand's-reference-number]" |
                Cancel (example - Consumers): Send "!cancel ref:123456" |
                Cancel (usage - Retailers): Send "!cancel proposal:[Demand's-reference-number-Proposal-number]" |
                Cancel (example - Retailers): Example: Send "!cancel ref:123456-2" |
                Cancel (rules): Only non-closed transactions can be cancelled |
                Cancel (see also): cancelled, state, state-flow, action |
                Cancel (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Cancelled" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Cancelled (glossary): transaction State triggered by a Consumer, or, Retailer to cease further transaction processing |
                Cancelled (see also): cancel, state-flow, state |
                Cancelled (AKA): canceled |
                Cancelled (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Close" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Close (story - Consumer): As a Consumer, I want to signify the successful completion of my Demand, so I can improve my Rating |
                Close (story - Retailer): As a Retailer, I want to signify the successful completion of Proposal, so I can improve my Rating |
                Close (usage - Consumer): Send "!close ref:[reference-number] note:[any-text] sentiment:[+/-] " |
                Close (usage - Retailer): Send "!close proposal:[proposal-number] note:[any-text] sentiment:[+/-] " |
                Close (example - Consumer): Send "!close ref:12345", or, Send "!close ref:123456 note:awesome sent:+ " |
                Close (example - Retailer): Send "!close proposal:23456", or, Send "!close proposal:23456 note:awesome sent:+ " |
                Close (rules): Consumers can only close open Demands created by them. Retailers can only close open Demands the have confirmed proposal for. Note and Sentiment are optional |
                Close (see also): closed, state, state-flow, action |
                Close (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Closed" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Closed: transaction State triggered by a Consumer, or, Retailer to signify successful completion of the transaction processing |
                Closed (see also): close, state-flow, state |
                Closed (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Command-line" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Command-line (glossary):  the ability to interact with a system via simple text messages - like, Twitter, or, text messaging. (Look Ma, no web site!). |
                    Command-line (see also): action |
                    Command-line (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Confirm" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Confirm (story): As a Consumer, I want to Confirm a successful match between my Demand and a Retailer's respective Proposal, so I can proceed to close the sale |
                Confirm (usage): Send "!confirm proposal:[proposal-number]" |
                Confirm (example): Send "!confirm proposal:123456-2" |
                Confirm (rules): Consumers can only confirm open Proposals for their Demands. Consumers are only allowed to have one confirmed Proposal for each Demand. Confirmed Proposals can be cancelled |
                Confirm (see also): confirmed, state, state-flow, action |
                Confirm (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Confirmed" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Confirmed: transaction State triggered by the Consumer after a Retailer has Proposed a good/service and Price they Confirm satisfies their Demand |
                Confirmed (see also): state-flow, proposal, state |
                Confirmed (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Consumer" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Consumer (glossary): a person who buys goods or uses services. Send "?demand", or, "?tags" for additional help. |
                    Consumer (see also): retailer, help |
                    Consumer (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="CRUD" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>CRUD (glossary): CRUD: acronym for the ability to create, read, update and delete Actions. |
                    CRUD (see also): demand, supply |
                    CRUD (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Decline" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Decline (story): As a Consumer, I want to Decline a Retailer's Proposal for a Demand of mine, so I have less open Proposals to consider |
                Decline (usage): Send "!decline proposal:[proposal-number]" |
                Decline (example): Send "!decline proposal:123456-2" |
                Decline (rules): Optional. Consumers can only decline open Proposals for their Demands. Declined Proposals cannot be undone |
                Decline (see also): declined, state, state-flow, action |
                Decline (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Declined" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Declined -- To be completed</seg>
            </tuv>
        </tu>
        <tu tuid="Delete" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Delete -- To be completed</seg>
            </tuv>
        </tu>
        <tu tuid="Demand" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Demand (story): As a Consumer, I want to create Demand for a desired good, or, service within the Locale and Range of my choice, so I may be notified upon its availability |
                Demand (usage): Send "[tags-describing-good-or-service] locale:[postal/zip-code 2-letter-country-code] range:[distance 2-letter-distance-unit-of-measure] expires:[yyyy-mm-dd]"|
                Demand (example): Send "wii console locale:12345 us range:25 mi expires:2009-12-23" |
                Demand (rules): Consumer must accept Twetailer terms and conditions on initial Demand. locale:, range: and expires: attributes are only required on initial Demand and subsequently default to their previous values. Example: Send "[tags-describing-good-or-service] |
                Demand (see also): demand-crud, opened, state, state-flow, action |
                Demand (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Demand-crud" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Demand-crud (create story): As a Consumer, I want to create a Demand transaction, so I may be notified upon its availability in my Locale. |
                    Demand-crud (read story): As a Consumer, I want to read the attributes of a Demand by reference number, so I can my search criteria. |
                    Demand-crud (update story): As a Consumer, I want to update attributes of my Demand by sending its reference number and their replacement values, so I can modify my search criteria Retailers in my Locale. |
                    Demand-crud (delete story): As a Consumer, I want to delete a Demand. |
                    Demand-crud (create example): Send "wii console locale:12345 US range:25 mi expires:2009-12-23" |
                    Demand-crud (read example): Send "!list ref:12345" |
                    Demand-crud (update example): Send "ref:12345 range:50 mi" |
                    Demand-crud (delete example): Send "!cancel ref:12345" |
                    Demand-crud (see also): ref, consumer, retailer, demand, demand-tags, locale, range, expires, cancel, list |
                    Demand-crud (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Expiration" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Expires (story): As a Consumer, I want to associate an Expiration date Attribute with my Demand - which defaults to one month from creation, so I can express my limited interest in making a purchase |
                Expires (usage): expires:[yyyy-mm-dd] |
                Expires (example): expires:2009-12-23 |
                Expires (rules): Valid formats are: [yyyy-mm-dd], [mm-dd-yyyy], [dd-mm-yyyy], with/without dashes "-". Date must be greater than, or, equal to current (today's) date |
                Expires (see also): demand-crud, retailer |
                Expires (AKA): expires, expiration, exp |
                Expires (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Fee" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Fee (glossary): Optional follow-on to Free service, where Twetailer enables Consumer to purchase item directly from Retailer via Amazon for the equivalent of Amazon service fees. |
                    Fee (see also): free |
                    Fee (since): Future release</seg>
            </tuv>
        </tu>
        <tu tuid="Flag" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Flag (story): As a Consumer, or, Retailer, I want to flag Twetailer of an issue with a respective Demand, or, Proposal, so I can help improve the service. |
                Flag (usage): Send "!problem ref:[demand-reference-number] note:[any-text] " |
                Flag (example ): Send "!problem ref:123456" note:product held was not the one proposed and confirmed |
                Flag (rules): Consumers can only report problems on open Demands created by them. Retailers can only report problems on Demands the have confirmed proposal for. Note is optional. "Sentiment:-" is implied |
                Flag (see also): flagged, state, state-flow, action |
                Flag (AKA): problem |
                Flag (since): Future release</seg>
            </tuv>
        </tu>
        <tu tuid="Flagged" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Flagged: transaction State triggered by a Consumer, or, Retailer to Flag a problem when attempting to Close transaction. |
                Flagged (see also): state-flow, state |
                Flagged (since): Future release</seg>
            </tuv>
        </tu>
        <tu tuid="Founders" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Founders (glossary): Twetailer is Steven's original idea, with Dom at the realization stage ;-) |
                    Founders (see also): founder |
                    Founders (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Free" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Free (glossary): Twetailer matches tags between Consumer's Demands &amp; Retailer's Supply, confirms availability and provides retailer's store location for free.  However, the Retailer is only asked to hold the item &amp; therefore its availability is not guaranteed. |
                    Free (see also): fee |
                    Free (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Friend" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Friend (story): As a Consumer, or, Retailer, I want to provide my Friend code, so they may be properly attributed for my membership. |
                Friend (rules): Friend value is numeric and is not visibile by any user other than its owner. |
                Friend (see also): register |
                Friend (since): Future release</seg>
            </tuv>
        </tu>
        <tu tuid="Fulfil" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Fulfil (story): As a Retailer, I want to fulfil / prepare / set aside / package the good, or, service reserved by the Consumer, so I can settle the account and get paid by Amazon. |
                    Fulfil (rules): Manual process only performed with Twetailer Fee service |
                    Fulfil (see also): fee, state-flow |
                    Fulfil (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Hash" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Hash (story): As Twetailer, I want to provide both Consumers and Retailers a structured set of tags, so they can better describe their respective Demand and Supply. |
                Hash (usage): #demo is currently the only supported hash tag which notifies Twetailer to automatically propose to the Demand. |
                Hash (rules): Reserved keyword |
                Hash (see also): attribute |
                Hash (AKA): hashtag, # |
                Hash (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Help" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Help (story): As a user of Twetailer, I want to request Help by sending a one-word term in various formats, so I can better understand how Twetailer works |
                Help (usage): Send "help:[query-term]", or, "!help", or, "?" |
                Help (example): Send "consumer?", or, "?consumer". Hint: You can query for Help on any capitalized help text keyword |
                Help (rules): Help System currently supports only one word queries and will ignore everything after the first word. Query for words in singular form, regardless of case. Therefore "?consumer" = "?Consumer" = "?CONSUMER" |
                Help (see also): ?, index, action |
                Help (resources): http://www.thefreedictionary.com/, http://dictionary.reference.com/, http://www.businessdictionary.com, http://en.wikipedia.org/wiki/Main_Page
                Help (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="IM" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>IM (glossary): Acronym for "instant messaging" |
                    IM (rules): Manual process only performed with Twetailer Fee service |
                    IM (see also): jabber, gtalk |
                    IM (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Invalid" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Invalid: transaction State triggered by Twetailer after a Demand has been created but is missing mandatory fields, like Locale |
                Invalid (see also): state-flow, state |
                Invalid (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="List" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>List (story): As a Consumer, or, Retailer, I want to List Objects, or, query Twetailer, so I can gain better insight into availability |
                List (see also): list-demands-private, list-demands-public, list-proposal, list-store, list-tag |
                List (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="List-demands-private" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>List-demands-private (story): As a Consumer, I want to read the attributes of one, or, more of my Demands, so I can review my search criteria |
                List-demands-private (usage-all): Send "!list". Example: Send "!list" |
                List-demands-private (usage-one): Send "!list ref:[demand-reference-number]". Example: "!list ref:12345" |
                List-demands-private (rules): Only list Demands owned by Consumer |
                List-demands-private (see also): list, list-demands-public, list-proposal, list-store, list-tag |
                List-demands-private (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="List-demands-public" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>List-demands-public (story): As a Consumer, or, a Retailer, I want a public listing for all Demands and all their attributes - except reference, within a Locale's Range, optionally by Expiration date, so I can see what Consumers are demanding |
                List-demands-public (usage): Send "!list locale:[postal/zip-code 2-letter-country-code] range:[distance 2-letter-distance-unit-of-measure] [expires:yyyy-mm-dd]" |
                List-demands-public (example): Send "!list locale:12345 us range:25 mi expires:2009-12-23" |
                List-demands-public (rules): Does not list Demand Reference numbers |
                List-demands-public (see also): list, list-demands-private, list-proposal, list-store, list-tag |
                List-demands-public (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="List-proposal" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>List-proposal (story): As a Consumer, or, Retailer, I want to List one, all, Proposals sent, or, received with optional search criteria |
                List-proposal (usage): Send "!list proposal:[proposal-number | * | from | to] [reference:demand-reference-number] [locale:h0h0 h0h ca] [range:25 km] [expires:2009-12-23]" |
                List-proposal (example): Send "!list proposal:*" |
                List-proposal (rules): Only Proposals sent, or, received by their respective owners are listed |
                List-proposal (see also): list, list-demands-private, list-demands-public,, list-proposal list-store, list-tag |
                List-proposal (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="List-store" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>List-store (story): As a Consumer, or, Retailer, I want to List one, or, all Stores with optional search criteria |
                List-store (usage): Send "!list store:[* | store-number] [locale:h0h0 h0h ca] [range:25 km]" |
                List-store (example): Send "!list store:*" |
                List-store (see also): list, list-demands-private, list-demands-public, list-proposal, list-tag |
                List-store (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="List-tag" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>List-tag (story): As a Consumer, or, Retailer, I want to List all Demand, or Supply Tags with with optional search criteria |
                List-tag (usage): Send "!list tags:[demand | supply] [locale:h0h0 h0h ca] [range:25 km] [expires:yyyy-mm-dd]" |
                List-tag (example): Send "!list tags:supply [locale:h0h0 h0h ca] [range:25 km] [expires:2009-12-23]"|
                List-tag (see also):  list, list-demands-private, list-demands-public, list-proposal, list-store |
                List-tag (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Locale" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Locale (story): As a Consumer, I want to instruct Twetailer to limit its search for my Demand, to Retailers within an area of my choice, so I can control how far I'm willing to travel to make the purchase |
                Locale (usage): "locale:[postal/zip-code 2-letter-country-code]" |
                Locale (example): "locale:12345 us" |
                Locale (rules): Required on initial Demand. Optional on subsequent Demands defaulting previous value. Valid 2-letter-country codes are: "us", or, "ca" |
                Locale (see also): range, demand-crud, attribute |
                Locale: (AKA): location, postalcode, zipcode |
                Locale (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="MarkedForDeletion" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Marked for deletion (glossary): state of an object before it deletion that will occurs as a background task later. |
                    Marked for deletion (see also): cancel |
                    Marked for deletion (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="MI" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>MI (glossary): A range unit of measure meaning Miles. Another valid value is "km" meaning kilometers. |
                    MI (rules): range, locale, demand |
                    MI (see also): km |
                    MI (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Name" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Name (story): As a Sales Associate, I want to provide my Store's name, so Consumers can know who I am. |
                Name (usage): Name of Store. |
                Name (rules): Legal, or, registered name of Store.  |
                Name (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Note" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Note (story): As a Consumer, I want to provide Twetailer with some feedback, so I can help improve the quality of service. |
                Note (usage): "note:[any-text]" |
                Note (example): "note:my product was not put aside :-( " |
                Note (see also): close, flag, attribute |
                Note (since): Future release</seg>
            </tuv>
        </tu>
        <tu tuid="Object" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Object(story): As Twetailer, I want to perform actions, or, manipulate objects and their attributes so I can deliver a valuable f(r)ee service. |
                    Object (rules): Valid objects are: Consumer, Retailer, Store, Demand, Supply |
                    Object (see also): list, state-flow, fee, free |
                    Object (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Opened" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Opened: transaction State triggered by a Consumer after initial Demand creation |
                Opened (see also): state-flow, state |
                Opened (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Phonenumber" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Phonenumber (story): As a Sales Associate, I want to provide my Store's telephone number, so Consumers can call if they need any more information. |
                Phonenumber (usage): Country code, area code and telephone number. |
                Phonenumber (rules): Must be a registered business phone number.  |
                Phonenumber (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Price" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Price (story): As a Sales Associate, I want to provide the listed retail price of the product I'm proposing, so Consumers can better evaluate their decision to purchase it from me. |
                Price (usage): Price and currency. |
                Price (rules): Must be the same retail price listed in the Store. |
                Price (see also): total |
                Price (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Proposal" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Proposal: system generated value identifying the full description and price of the good/service a Retailer has in stock, and Proposes in response to a Consumer's Demand |
                    Proposal (see also): tags, supply, demand |
                    Proposal (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Propose" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Propose (story): As a Retailer, I want to supply Consumer's demand by proposing a matching available good, or, service, so I can always be closing sales.|
                Propose (usage - free): Send "!propose ref:[demand-reference-number] product:[actual-product-name] price:[price-marked-in-store]" |
                Propose (example - free): Send "!propose ref:123456 product:"Nintendo Wii Console with Wii Fit Balance Board" price:369.98". |
                Propose (usage - fee): Send "!propose ref:[demand-reference-number] product:[actual-product-name] price:[price-marked-in-store] total:[total-to-go-on-credit-card]" |
                Propose (example - fee): Send "!propose ref:123456 product:"Nintendo Wii Console with Wii Fit Balance Board" price:369.98 total:430.14" |
                Propose (rules): Retailers can only Propose for Demands published to them. Twetailer will respond with Proposal number in format proposal:[demand-reference-number-incremental-proposal-number]. Example: proposal:12346-2 |
                Propose (see also): proposal, proposed, state, state-flow, action. |
                Propose (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Proposed" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Proposed: transaction State triggered by Retailer after proposing a suitable and available good, or, service for a Published Demand |
                Proposed (see also): proposal, proposed, state, state-flow, action. |
                Proposed (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Published" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Published: transaction State triggered by Twetailer after a Demand has been Published to Retailers, within the Demand's Locale and matching their Supply Tags |
                Published (see also): state-flow, state |
                Published (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Quantity" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Quantity (story): As a Consumer, I want to instruct Twetailer to find one, or, more available units of my Demand, so I can buy everything from the same Retailer |
                Quantity (usage): "qty:[numeric-quantity]" |
                Quantity (example): "qty:2" |
                Quantity (rules): Optional.  Defaults to one (1).  Must be greater than zero |
                Quantity (see also): demand-crud, attribute |
                Quantity (AKA): qty |
                Quantity (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Range" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Range (story): As a Consumer, I want to control the area Twetailer searches for my Demand, so I can determine just how far I'm willing to travel to make my purchase |
                Range (usage): "range:[distance 2-letter-distance-unit-of-measure]" |
                Range (example): "range:50 mi" |
                Range (rules): Distance must be a number greater than zero and less than 24906 mi, or, 40075 km. Distance-unit-of-measure is either "miles", or, " kilometers" and defaults to 25 mi, or, km |
                Range (see also): 24906, 40075, mi, demand-crud, attribute |
                Range (AKA): rng, distance |
                Range (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Rate" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Rate (story): As a Consumer, or, Retailer, I want to retrieve the Rating of others involved in my transaction so I can better judge with whom I want to deal with |
                Rate (usage - Consumers): Send "!rate proposal:[proposal-number]" to see Retailer Rating |
                Rate (example - Consumers): Send "!rate proposal:[123456-2]" |
                Rate (usage - Retailers): Send "!rate ref:[reference-number]" to see Consumer Rating |
                Rate (example - Retailers): Send "!rate ref:[123456]" |
                Rate (rules): Twetailer will respond with a "Rating ref/proposal:[number] Closes 95%". Twetailer will not disclose any of the other party's information |
                Rate (since): Future release</seg>
            </tuv>
        </tu>
        <tu tuid="Reference" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Reference (story): As a Consumer, or, Retailer, I want an easy way to refer to a Demand, so I don't have to repeat all the Tags |
                Reference (usage): "ref:[Demand-reference-number]" |
                Reference (example): "ref:[Demand-reference-number]" |
                Reference (rules): System generated value when Demand created |
                Reference (see also): demand-crud, attribute |
                Reference (AKA): ref, id, identifier |
                Reference (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Register" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Register (story): As a member of the supply chain, I want to register as a Sales Associate, a Store, or, a Retailer, so I can start supplying Demand |
                Register (see also): register-salesassociate, register-store, register-retailer, register-link |
                Reference (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Register-link" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Register-link (story): As the Responsible Sales Associate my Store, or, Retailer, I want to register the link between my respective Sales Associates and Store(s), and my Stores and Retailer, with optional Expiration date, so I can start Supplying tags |
                Register-link (usage): Send "!register retailer:[Retailer-ID] store:[Store-ID] salesAssocate:[SA-ID] [expiration:[yyyy-mm-dd]] |
                Register-link (usage): Send "!register retailer:12345 store:23456 ", or, "!register salesassociate:34567 store:23456 expiration:2010-12-23" |
                Register-link (rules): The RetailerID must exist in the Store record. The StoreID must exist in the Sales Associate record. |
                Register-link (see also): register, register-salesassociate, register-store, register-retailer |
                Register-link (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Register-retailer" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Register-retailer (story): As the Sales Associate responsible for the Retailer, I want to register my Retailer, so I can link it with my Stores |
                Register-retailer (usage - Create): Send "!register type:retailer name:[retailer-full-name] email:[retailer-email-address] locale:[postal/zip-code 2-letter-country-code] range:[distance 2-letter-distance-unit-of-measure] responsibleID:[SalesAssociate-ID]"  |
                Register-retailer (example - Create): Send "!register type:retailer name:Paw's email:info@paws.com locale:12345 us range:25 mi responsible:12345 "  |
                Register-retailer (usage - Update): Send "!register retailer:[Retailer-ID] name:[retailer-full-name] email:[retailer-email-address] locale:[postal/zip-code 2-letter-country-code] range:[distance 2-letter-distance-unit-of-measure] responsibleID:[SalesAssociate-ID]" |
                Register-retailer (example - Update): Send "!register retailer:23456 name:Paw's email:info@paws.com locale:12345 us range:25 mi responsible:12345 " |
                Register-retailer (rules): System generates Retailer ID. A notification will be sent to the Responsible Sales Associate for them to acknowledge the link. A notification will be sent to the Retailer's Responsible Sales Associate for them to initiate the link. Responsible Sales Associates must accept Twetailer's terms and conditions upon creation.
                Register-retailer (see also): register, register-salesassociate, register-store, register-link |
                Register-retailer (AKA): banner |
                Register-retailer (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Register-salesassociate" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Register-salesassociate (story): As a Sales Associate, I want to register myself and optionally a backup Sales Associate with Twetailer, so I can be linked to a Store and optionally a Retailer |
                Register-salesassociate (usage - Create): Send "!register [type:SalesAssociate] name:[SA-full-name] email:[SA-email-address] locale:[postal/zip-code 2-letter-country-code] range:[distance 2-letter-distance-unit-of-measure] store:[storeID] [backup:[backup-SA-ID]] [delay:number d | h]]" |
                Register-salesassociate (example - Create): Send "!register name:Ryan Retailer email:ryan@pawselectronics.com locale:12345 us range:25 mi store:67890 backup:12345 delay:1d "  |
                Register-salesassociate (usage - Update): Send "!register salesAssocate:[SA-ID] name:[SA-full-name] email:[SA-email-address] [locale:[postal/zip-code 2-letter-country-code]] [range:[distance 2-letter-distance-unit-of-measure]] store:storeID [backup:[backup-SA-ID]] delay:[[number d | h] " |
                Register-salesassociate (example - Update): Send "!register salesassociate:23456 name:Ryan Retailer email:ryan@pawselectronics.com locale:12345 us range:25 mi store:67890 backup:12345 delay:1d" |
                Register-salesassociate (rules): System generates Sakes Associate ID. A notification will be sent to the Backup Sales Associate for them to acknowledge the link. A notification will be sent to the Store's Responsible Sales Associate for them to initiate the link. Sales Associates cannot Propose any goods/services until they are linked to a Store. The Backup Sales Associate will receive Demand notifications in the event the Sales Associate does not Propose, or Decline a Demand within 24 hours. Sales Associates must accept Twetailer's terms and conditions upon creation.
                Register-salesassociate (see also): register, register-store, register-retailer, register-link |
                Register-salesassociate (AKA): sa, agent |
                Register-salesassociate (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Register-store" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Register-store (story): As the Sales Associate responsible for the Store, I want to register my Store, so I can link my Sales Associates and optionally associate it with a Retailer |
                Register-store (usage - Create): Send "!register type:store name:[store-name] tel:[store's-business-telelphone-number] email:[store-email-address] address:[full-address] locale:[postal/zip-code 2-letter-country-code] range:[distance 2-letter-distance-unit-of-measure] responsible:[SalesAssociate-ID] retailer:retailerID" |
                Register-store (example - Create): Send "!register type:store name:Paw's Electronics and Gadgets email:info@pawselectronics.com address:[full-address] locale:12345 us range:25 mi responsible:12345 retailer:67890 " |
                Register-store (usage - Update): Send "!register store:Store-ID name:[store-name] tel:[store's-business-telelphone-number] email:[store-email-address] address:[full-address] locale:[postal/zip-code 2-letter-country-code] range:[distance 2-letter-distance-unit-of-measure] responsibleID:[SalesAssociate-ID] retailer:retailerID" |
                Register-store (example - Update): Send "!register store:23456 name:Paw's Electronics and Gadgets email:info@pawselectronics.com address:123 Main St. locale:12345 us range:25 mi responsible:12345 retailer:67890 " |
                Register-store (rules): System generates Store ID. A notification will be sent to the Responsible Sales Associate for them to acknowledge the link. A notification will be sent to the Retailer's Responsible Sales Associate for them to initiate the link.  Responsible Sales Associates must accept Twetailer's terms and conditions upon creation. |
                Register-store (see also): register, register-salesassociate, register-retailer, register-link |
                Register-store (AKA): location |
                Register-store (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Reserve" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Reserve (story): As a Consumer, I want to Reserve - via Amazon, the good, or, service Proposed by the Retailer, so I can complete the purchase as soon as possible, avoiding any delay, or risk in obtaining it |
                Reserve (usage): Send "!reserve proposal:[proposal-number] total:dollar-value" |
                Reserve (example): Send "!reserve proposal:23456 total:430.14" |
                Reserve (rules): Twetailer Fee Service. Consumers accept terms and conditions. Twetailer will respond with the Amazon web site address.  Consumer will have to open that address in a browser and complete transaction |
                Reserve (see also): proposed, state, state-flow, </seg>
            </tuv>
        </tu>
        <tu tuid="Reserved" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Reserved: transaction State triggered by the Consumer where they Reserve - via Amazon, the good/service Proposed by a Retailer |
                Reserved (see also): reserve, state-flow, state |
                Reserved (since): Future release</seg>
            </tuv>
        </tu>
        <tu tuid="Retailer" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Retailer (glossary): A business which sells goods to the consumer, as opposed to a wholesaler or supplier which normally sell their goods to another business. Twetailer lumps Sales Associates, Stores and Retailers together and often refers to them all as Retailers. Send "?supply", or, "?tags" for additional help. |
                Retailer (see also): consumer, help |
                Retailer (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Salesassociate" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Salesassociate (glossary): Sales clerk. Person who works on a sales floor of a retail store. Twetailer lumps Sales Associates, Stores and Retailers together and often refers to them all as Retailers. Send "?supply", or, "?tags" for additional help. |
                Salesassociate (see also): retailer, store, consumer, help |
                Salesassociate (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Sentiment" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Sentiment (story):  |
                Sentiment (usage):  |
                Sentiment (rules): Valid values are "+", "-" |
                Sentiment (see also): attribute |
                Sentiment (AKA): emo |
                Sentiment (since): Future release</seg>
            </tuv>
        </tu>
        <tu tuid="Settle" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Settle (story): As a Retailer, I want to notify Twetailer of my fulfilling of the Consumer's Reserved Proposal, so I can receive payment |
                Settle (usage): Send "!settle proposal:[proposal-number]" |
                Settle (usage): Send "!settle proposal:123456-2" |
                Settle (rules): Twetailer Fee Service. Retailers can only Settle for Reserved Proposals they created |
                Settle (see also): settled, fulfil, state, state-flow, action |
                Settle (since): Future release</seg>
            </tuv>
        </tu>
        <tu tuid="Settled" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Settled: transaction State triggered by Twetailer after the Retailer has fulfilled and been paid for the Reserved good, or, service |
                Settled (see also): settle, reserve, fulfil, state |
                Settled (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="State" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>State (story): As Twetailer, I want to change the state, or, condition, of a transaction within its process, or, flow |
                State (see also): state-flow, attribute |
                State (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="State-flow" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>State-flow (glossary): State-Flow: Opened / Invalid -&gt; Published -&gt; Proposed -&gt; Confirmed -&gt; Reserved (fee) -&gt; Fulfilled (Fee) -&gt; Settled (Fee) -&gt; Closed / Flagged. See also: opened, invalid, published, proposed, confirmed, reserved, fee, free, fulfilled, settled, closed, flagged. |
                State-flow (see also): state, attribute |
                State-flow (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Store" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Store (glossary): a place where merchandise is offered for sale. |
                Twetailer has Retailers which are linked to Stores, which are linked to Sales Associates.
                However for the sake of simplicity, Twetailer lumps Sales Associates, Stores and Retailers all together and often refers to them collectively as "Retailers" |
                Store (see also): retailer, salesassociate |
                Store (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Supply" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Supply (story): As a Retailer, I want to Supply Tags describing the goods, or, services I offer, so I may be notified upon Consumer's immediate interests |
                Supply (usage): Send "!supply tags:[my-goods-services]" |
                Supply (example): Send "!supply tags:nintendo wii sony playstation psp, psp2, psp3 super mario fit" |
                Supply (rules): Retailers must be registered before they can Supply tags |
                Supply (see also): tags-retailer, register, action |
                Supply (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Tags" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Tags (story - Consumer ): As a Consumer, I want to describe the good, or, service I'm seeking to purchase with common keywords, or exact quoted phrases, so a Retailer within range of my locale can be notified of my immediate interest, or, Demand. |
                    Tags (story - Retailer): As a Retailer, I want to describe the good, or, service I supply with common keywords, or, exact quoted phrases, so I can be notified when a Consumer within range of my locale is interested in making a purchase |
                    Tags (usage - Create/Replace): "tags:[space-separated-tags-describing-good-or-service] "|
                    Tags (example - Create/Replace): "tags:wii" |
                    Tags (usage - Add): "+tags:[my-tags-to-add]" |
                    Tags (example - Add): "+tags:xbox console" |
                    Tags (usage - Remove): "-tags:[my-tags-remove]" |
                    Tags (example - Remove): "-tags:wii" |
                    Tags (rules): The action keyword "tags:" is optional when Consumers create Demand. Example: Send "wii console" is equivalent to Send "tags:wii console"  |
                    Tags (see also): demand, supply, ref |
                    Tags (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Total" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Total (story): As a Sales Associate, I want to provide the total cost - including all extra charges, such as taxes, service fees, etc. for the product I'm proposing, so Consumers can better evaluate their decision to purchase it from me. |
                Total (usage): Total cost and currency. |
                Total (rules): This is the final price the Consumer will ultimately pay.  |
                Total (see also): price |
                Total (AKA): totalcost |
                Total (since): Future release</seg>
            </tuv>
        </tu>
        <tu tuid="Twitter" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Twitter (glossary): "Share and discover what's happening right now, anywhere in the world." |
                Twitter (see also): http://twitter.com |
                Twitter (since): v0.0</seg>
            </tuv>
        </tu>
        <tu tuid="Wish" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>Wish (story): As a potential Consumer, I want to maintain a wish-list of Tags, so I, or, someone I share it with, might Demand one day |
                Wish (usage): Send "!wish tags:[my-list-of-wish-tags]". Example: Send "!wish tags:"wii console"" |
                Wish (rules): Potential Consumer must accept Twetailer terms and conditions |
                Wish (since): Future release</seg>
            </tuv>
        </tu>
        <tu tuid="WWW" dataType="text">
            <prop type="x-tier">javarb</prop>
            <prop type="x-version">1</prop>
            <tuv xml:lang="fr">
                <seg>WWW (story):  |
                WWW (usage): http://twetailer.com |
                WWW (rules):  |
                WWW (see also): action |
                WWW (AKA): url |
                WWW (since): v0.0</seg>
            </tuv>
        </tu>
    </body>
</tmx>

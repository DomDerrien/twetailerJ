(function() { // To limit the scope of the private variables

    var module = dojo.provide("twetailer.GolfAssociate");

    dojo.require("domderrien.i18n.LabelExtractor");

    /* Set of local variables */
    var _getLabel,
        _grid,
        _gridCellNode,
        _gridRowIndex,
        _demandStore,
        _proposals;

    /**
     * Initializer
     *
     * @param {String} locale Identifier of the chosen locale
     */
    module.init = function(locale) {
        // Get the localized resource bundle
        domderrien.i18n.LabelExtractor.init("twetailer", "master", locale);
        domderrien.i18n.LabelExtractor.init("twetailer", "console", locale);
        _getLabel = domderrien.i18n.LabelExtractor.getFrom;

        // Attach the contextual menu to the DataGrid instance
        // Note: initialization code grabbed in the dojo test file: test_grid_tooltip_menu.html
        _grid = dijit.byId("demandList");
        dijit.byId("cellMenu").bindDomNode(_grid.domNode);
        _grid.onCellContextMenu = function(e) {
            _gridCellNode = e.cellNode;
            _gridRowIndex = e.rowIndex;
        };

        // Fetch
        _proposals = {};
        _loadAllDemands();
    };

    /**
     * Load all demands from the back-end (no 'lastModificationDate' given) and fetch the grid with them
     */
    var _loadAllDemands = function() {
        var dfd = _loadRemoteDemands();
        dfd.addCallback(function(response) { _processDemandList(response.resources); });
    };

    /**
     * Load the demands modified after the given date from the back-end
     *
     * @param {Date} lastModificationDate (Optional) Date to considered before returning the demands
     * @return {dojo.Deferred} Object that callers can use to attach callbacks and errbacks
     */
    var _loadRemoteDemands = function(lastModificationDate) {
        dijit.byId("demandListOverlay").show();
        var dfd = dojo.xhrGet({
            content: {
                pointOfView: "SA",
                lastModificationDate: lastModificationDate == null ? null : lastModificationDate
            },
            handleAs: "json",
            load: function(response, ioArgs) {
                if (response !== null && response.success) {
                    // Deferred callback will process the list
                }
                else {
                    alert(response.message+"\nurl: "+ioArgs.url);
                }
                dijit.byId("demandListOverlay").hide();
                return response;
            },
            error: function(message, ioArgs) { alert(message+"\nurl: "+ioArgs.url); },
            preventCache: true,
            url: "/API/Demand/"
        });
        return dfd;
    };

    /**
     * Callback processing a list of demands that should replace the current grid content
     *
     * @param {Demand[]} List of demands to insert into the grid
     */
    var _processDemandList = function(resources) {
        // Prepare the data store
        _demandStore = new dojo.data.ItemFileWriteStore({
            data: { identifier: 'key', items: resources }
        });
        // Fetch the grid with the data
        _demandStore.fetch( {
            query : {},
            onComplete : function(items, request) {
                if (_grid.selection !== null) {
                    _grid.selection.clear();
                }
                _grid.setStore(_demandStore);
            },
            error: function(message, ioArgs) { alert(message+"\nurl: "+ioArgs.url); }
        });
    };

    /**
     * Date formatter
     *
     * @param {String} ISO representation of a Date, as generated by the back-end
     * @return {String} Simply formatted date
     */
    module.displayDate = function(dateObject) {
        dateObject = dojo.date.stamp.fromISOString(dateObject);
        return dojo.date.locale.format(dateObject, {selector: "date"});
    };

    /**
     * Date & Time formatter
     *
     * @param {String} ISO representation of a Date, as generated by the back-end
     * @return {String} Simply formatted date
     */
    module.displayDateTime = function(dateObject) {
        dateObject = dojo.date.stamp.fromISOString(dateObject);
        return dojo.date.locale.format(dateObject, {selector: "dateTime"});
    };

    /**
     * Criteria formatter
     *
     * @param {String[]} List of criteria, as generated by the back-end
     * @return {String} Serialized criteria list
     */
    module.displayCriteria = function(criteria) {
        return criteria.join(" ");;
    };

    var _proposalKeyDecoration = ["<a href='#' onclick='twetailer.GolfAssociate.displayProposalForm(", ",", ");return false;' title='", "'>", "</a> "];

    /**
     * Formatter for the list of attached proposal keys
     *
     * @param {Number[]} List of proposal keys
     * @return {String} Formatter list of one link per proposal key, a link opening a dialog with the proposal detail
     */
    module.displayProposalKeys = function(proposalKeys, rowIndex) {
        var value = [];
        var limit = proposalKeys == null ? 0 : proposalKeys.length;
        for (var idx = 0; idx < limit; idx ++) {
            var pK = proposalKeys[idx];
            value.push(_proposalKeyDecoration[0]);
            value.push(rowIndex);
            value.push(_proposalKeyDecoration[1]);
            value.push(pK);
            value.push(_proposalKeyDecoration[2]);
            value.push(_getLabel("console", "ga_cmenu_viewProposal", [pK]));
            value.push(_proposalKeyDecoration[3]);
            value.push(pK);
            value.push(_proposalKeyDecoration[4]);
        }
        return value.join("");
    };

    /**
     * Open a dialog box with the attributes of the identified proposal. If there's no
     * proposalKey, the variable set by the contextual menu handler for the Demand grid
     * is used to identified a selected grid row and to propose a dialog for a new
     * proposal creation.
     *
     * @param {Number} proposedRowIndex (Optional) index given when a link on the proposal key is activated
     * @param {Number} proposalKey (Optional) index given when a link on the proposal key is activated
     */
    module.displayProposalForm = function(proposedRowIndex, proposalKey) {
        // rowIndex bind to the handler
        if (proposedRowIndex == null) {
            if (_gridRowIndex === null) {
                return;
            }
            proposedRowIndex = _gridRowIndex;
        }

        var item = _grid.getItem(proposedRowIndex);
        if (item === null) {
            return;
        }

        var proposalForm = dijit.byId("proposalForm");
        proposalForm.reset();

        dijit.byId("demand.key").attr("value", item.key);
        dijit.byId("demand.criteria").attr("value", item.criteria.join(" "));
        dijit.byId("demand.quantity").attr("value", item.quantity);

        if (proposalKey == null) {
            proposalForm.attr("title", _getLabel("console", "ga_cmenu_createProposal"));
            dijit.byId("proposalFormSubmitButton").attr("label", _getLabel("console", "create_button"));
            dijit.byId("proposalFormCancelButton").attr("disabled", true);
            dojo.query(".existingProposalAttribute").style("display", "none");
        }
        else {
            _loadProposal(proposalKey);
            proposalForm.attr("title", _getLabel("console", "ga_cmenu_viewProposal", [proposalKey]));
            dijit.byId("proposalFormSubmitButton").attr("label", _getLabel("console", "update_button"));
            dijit.byId("proposalFormCancelButton").attr("disabled", false);
            dojo.query(".existingProposalAttribute").style("display", "");
            dijit.byId("proposal.key").attr("value", proposalKey);
        }
        proposalForm.show();
        dijit.byId('proposal.price').focus();
    };

    /**
     * Load the identified proposal by its key from a local cache or from the remote back-end.
     * The control is passed to the <code>_fetchProposal()</code> for the update of dialog box
     * with the Proposal attributes.
     *
     * @param {String} proposalKey Identifier of the proposal to load
     */
    var _loadProposal = function(proposalKey) {
        if (_proposals[proposalKey] != null) {
            _fetchProposal(_proposals[proposalKey]);
        }
        else {
            var dfd = _loadRemoteProposal(proposalKey);
            dfd.addCallback(function(response) { _fetchProposal(_proposals[proposalKey]); });
        }
    };

    /**
     * Load the identified proposal by its key from the remote back-end.
     *
     * @param {String} proposalKey Identifier of the proposal to load
     * @return {dojo.Deferred} Object that callers can use to attach callbacks and errbacks
     */
    var _loadRemoteProposal = function(proposalKey) {
        dijit.byId("proposalFormOverlay").show();
        var dfd = dojo.xhrGet({
            content: null,
            handleAs: "json",
            load: function(response, ioArgs) {
                if (response !== null && response.success) {
                    var resource = response.resource;
                    _proposals[proposalKey] = resource;
                }
                else {
                    alert(response.message+"\nurl: "+ioArgs.url);
                }
                dijit.byId("proposalFormOverlay").hide();
                return response;
            },
            error: function(message, ioArgs) { alert(message+"\nurl: "+ioArgs.url); },
            url: "/API/Proposal/" + proposalKey
        });
        return dfd;
    };

    /**
     * Use the given Proposal to fetch the corresponding dialog box
     *
     * @param {Proposal} proposal Object to represent
     */
    var _fetchProposal = function(proposal) {
        var time = null;
        var additionalInformation = [];
        var criteria = proposal.criteria;
        var limit = criteria.length;
        for (var idx = 0; idx < limit; idx++) {
            var criterion = criteria[idx];
            if (criterion == "time:") {
                idx ++;
                time = _getTime(criteria[idx]);
            }
            else if (criterion.substr(0, "time:".length) == "time:") {
                time = _getTime(criterion.substring("time:".length, criterion.length));
            }
            else {
                additionalInformation.push(criterion);
            }
        }
        if (time != null) {
            dijit.byId("proposal.time").attr("value", time);
        }
        dijit.byId("proposal.state").attr("value", proposal.state);
        dijit.byId("proposal.price").attr("value", proposal.price);
        dijit.byId("proposal.total").attr("value", proposal.total);
        // TODO: skip the date part ;)
        dijit.byId("proposal.criteria").attr("value", additionalInformation.join(" "));
        dijit.byId("proposal.modificationDate").attr("value", module.displayDateTime(proposal.modificationDate));
    };

    /**
     * Helper extracting the time in 24 or AM/PM
     */
    var _getTime = function(time) {
        var hour = parseInt(time.substr(0, 2));
        var minute = parseInt(time.substr("00:".length, 2));
        if (isNaN(hour) || isNaN(minute)) {
            return null;
        }
        if (time.charAt("00:00".length) != ':') {
            if (time.charAt("00:00".length) == 'p') {
                hour += 12;
            }
            if (time.charAt("00:00".length) == ' ' && time.charAt("00:00 ".length) == 'p') {
                hour += 12;
            }
        }
        return new Date(1970,0,1,parseInt(hour),parseInt(minute),0,0);
    };

    /**
     * Call the back-end to create or update a Proposal with the given attribute
     *
     * @param {Object} data Set of attributes built from the <code>form</code> embedded in the dialog box
     */
    module.updateProposal = function(data) {
        data.key = isNaN(data.key) ? null : data.key;
        data.total = isNaN(data.total) ? null : data.total;
        data.criteria = data.criteria.split(" ");
        data.criteria.push("time:" + data.time.toString().replace(/.*1970\s(\S+).*/,"$1"));

        var dfd = _updateRemoteProposal(data);
        dfd.addCallback(function(response) { module.loadNewDemands() });
    };

    /**
     * Call the back-end to create or update a Proposal with the given attribute
     *
     * @param {Object} data Set of attributes built from the <code>form</code> embedded in the dialog box
     */
    module.cancelProposal = function() {
        if (!confirm("Do you want to retake the proposal?")) {
            return;
        }

        dijit.byId("proposalFormOverlay").show();
        var dfd = _updateRemoteProposal({
            key: dijit.byId("proposal.key").attr("value"),
            state: "cancelled"
        });
        dfd.addCallback(function(response) { dijit.byId("proposalFormOverlay").hide(); dijit.byId("proposalForm").hide(); module.loadNewDemands() });
    };

    /**
     * Call the back-end to create or update a Proposal with the given attribute
     *
     * @param {Object} data Set of attributes built from the <code>form</code> embedded in the dialog box
     * @return {dojo.Deferred} Object that callers can use to attach callbacks and errbacks
     */
    var _updateRemoteProposal = function(data) {
        dijit.byId('demandListOverlay').show();
        var dfd = (data.key == null ? dojo.xhrPost : dojo.xhrPut)({
            headers: { "content-type": "application/json; charset=utf-8" },
            postData: dojo.toJson(data),
            putData: dojo.toJson(data),
            handleAs: "json",
            load: function(response, ioArgs) {
                if (response !== null && response.success) {
                    var proposal = response.resource;
                    _proposals[proposal.key] = proposal;
                }
                else {
                    alert(response.message+"\nurl: "+ioArgs.url);
                }
                dijit.byId('demandListOverlay').hide();
            },
            error: function(message, ioArgs) { alert(message+"\nurl: "+ioArgs.url); },
            url: "/API/Proposal/" + (data.key == null ? "" : data.key)
        });
        return dfd;
    };

    /**
     * Call the back-end to get the new Demands
     */
    module.loadNewDemands = function() {
        var dfd = _loadRemoteDemands();
        dfd.addCallback(function(response) { dijit.byId("refreshButton").resetTimeout(); _processDemandList(response.resources); });
    };

})(); // End of the function limiting the scope of the private variables

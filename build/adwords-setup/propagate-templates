#!/bin/bash

#
# Check the parameters
#
if [ $# != 3 ]
then
    echo Error: script requires 3 parameters!
    echo propagate-templates \<source-base\> \<city\> \<postal-code\>
    exit
fi

#
# Echo back the given parameters
#
echo Create files with:
echo   Source:      $1
echo   City:		$2
echo   Postal Code: $3
echo 

source=$1
city=$2
postalCode=$3

#
# Confirm the command with a simple return-to-line or the letter 'y' plus the return-to-line
#
read -p "Do you want to continue? [y/N]" yn
if [ -n "$yn" ] && [ "$yn" != "y" ]
then
    echo Bye
    exit
fi

#
# Function replacing the meta-tags
#
function replaceMetaTags {
    # echo Processing $city -- $postalCode -- $brand -- $model -- $1 


    sed -e 's/_CITY_/'"$city"'/g' \
        -e 's/_MAKE_/'"$brand"'/g' \
        -e 's/_MODEL_/'"$model"'/g' \
        -e 's/_POSTAL_CODE_/'"$postalCode"'/g' \
        -e 's/_QUALIFIER_/'"$1"'/g' \
        -e 's/_FR_PATH_/'"$2"'/g' < index.html > index_u.html
    mv index_u.html index.html
}

#
# Function creating the folder city/brand/model and copying and customizing the templates in subfolders
#
function processCityBrandModel {
    # echo Processing $city -- $postalCode -- $brand -- $model 

    mkdir -p "$city"
    mkdir -p "$city"/"$brand"
    mkdir -p "$city"/"$brand"/"$model"
    cd "$city"/"$brand"/"$model"
    cp ../../../$source"_en.html" index.html
    replaceMetaTags "Pre-Owned" "fr"

    mkdir -p Used
    cd Used
    cp ../../../../$source"_en.html" index.html
    replaceMetaTags "Used" "..\/fr"

    mkdir -p ../fr
    cd ../fr
    cp ../../../../$source"_fr.html" index.html
    replaceMetaTags "d\'Occasion" ".."
    
    cd ../../../..
}

#
# Function copying customized pages for one model as the default ones for the brand
#
function processCityBrand {
    # echo Processing $city -- $postalCode -- $brand

    cd "$city"/"$brand"/"$model"
    cp index.html ../

    cd Used
    mkdir -p ../../Used
    cp index.html ../../Used

    cd ../fr
    mkdir -p ../../fr
    cp index.html ../../fr
    
    cd ../../../..
}

#
# Function copying customized pages for one brand as the default ones for the city
#
function processCity {
    # echo Processing $city -- $postalCode

    cd "$city"/$1
    cp index.html ../

    cd Used
    mkdir -p ../../Used
    cp index.html ../../Used

    cd ../fr
    mkdir -p ../../fr
    cp index.html ../../fr
    
    cd ../../..
}

function processBrand {
    echo Processing $city -- $postalCode -- $brand

    modelIdx=0
    for i in "${models[@]}"
    do
        model=$i
        processCityBrandModel
        if [ $modelIdx == 0 ]
        then
            processCityBrand
            let "modelIdx++"
        fi
    done
}

#
# Iterate over the maker list to create the corresponding files from the templates
#

# Note that the first model is the default model for the brand
brand="BMW";         models=( "325" "328" "530" ); processBrand $brand $models;
brand="Mini";        models=( "Cooper" ); processBrand $brand $models;
brand="Volvo";       models=( "122S" "1800" "245" "544" "850" "940" "960" "C30" "C70" "S40" "S60" "S70" "S80" "V40" "V50" "V70" "XC60" "XC70" "XC90" ); processBrand $brand $models;

processCity "Volvo"
exit

brand="Acura";         models=( "TLX" "RL" "TL" "ZDX" "MDX" "RDX" ); processBrand $brand $models;
brand="Audi";          models=( "A4" "A3" "A5" "A6" "A8" "Q5" "Q7" "TT" "R8" ); processBrand $brand $models;
brand="BMW";           models=( "Z4" "1" "3" "5" "6" "7" "X" "M" ); processBrand $brand $models;
brand="Buick";         models=( "test" ); processBrand $brand $models;
brand="Cadillac";      models=( "test" ); processBrand $brand $models;
brand="Chevrolet";     models=( "test" ); processBrand $brand $models;
brand="Chrysler";      models=( "test" ); processBrand $brand $models;
brand="Dodge";         models=( "test" ); processBrand $brand $models;
brand="Ford";          models=( "test" ); processBrand $brand $models;
brand="GMC";           models=( "test" ); processBrand $brand $models;
brand="Honda";         models=( "test" ); processBrand $brand $models;
brand="Hummer";        models=( "test" ); processBrand $brand $models;
brand="Hyundai";       models=( "test" ); processBrand $brand $models;
brand="Infiniti";      models=( "test" ); processBrand $brand $models;
brand="Jeep";          models=( "test" ); processBrand $brand $models;
brand="Kia";           models=( "test" ); processBrand $brand $models;
brand="Land Rover";    models=( "test" ); processBrand $brand $models;
brand="Lexus";         models=( "test" ); processBrand $brand $models;
brand="Lincoln";       models=( "test" ); processBrand $brand $models;
brand="Mazda";         models=( "test" ); processBrand $brand $models;
brand="Mercedes Benz"; models=( "test" ); processBrand $brand $models;
brand="Mini";          models=( "test" ); processBrand $brand $models;
brand="Mitsubishi";    models=( "test" ); processBrand $brand $models;
brand="Nissan";        models=( "test" ); processBrand $brand $models;
brand="Pontiac";       models=( "test" ); processBrand $brand $models;
brand="Porsche";       models=( "test" ); processBrand $brand $models;
brand="Saab";          models=( "test" ); processBrand $brand $models;
brand="Saturn";        models=( "test" ); processBrand $brand $models;
brand="Smart";         models=( "test" ); processBrand $brand $models;
brand="Subaru";        models=( "test" ); processBrand $brand $models;
brand="Suzuki";        models=( "test" ); processBrand $brand $models;
brand="Toyota";        models=( "test" ); processBrand $brand $models;
brand="Volkswagen";    models=( "test" ); processBrand $brand $models;
brand="Volvo";         models=( "test" ); processBrand $brand $models;
